name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs: {}

jobs:
  sync:
    name: Sync Files Across Deploy Targets
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.verify-changed-files.outputs.files_changed}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Setup dependencies
        run: yarn install
      - name: Sync files
        run: yarn sync
      - name: Check if files changed
        uses: tj-actions/verify-changed-files@v10
        id: verify-changed-files
        with:
          files: |
            architect/app/**/*
            fly/app/**/*
            netlify/app/**/*
            pages/app/**/*
            vercel/app/**/*
            workers/app/**/*
      # Commit and bail if anything changes
      - name: Commit
        uses: EndBug/add-and-commit@v9
        with:
          add: architect fly netlify pages vercel workers
          default_author: github_actions
          message: Sync targets
        if: steps.verify-changed-files.outputs.files_changed == 'true'
      # TODO prevent this from running off of a manual run (infinite loop?)
      - name: Retrigger
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          echo "Retriggering..."
          curl -X POST -H "Authorization: token ${{ secrets.GH_PAC }}" https://api.github.com/repos/plohkoon/remix-testing/actions/workflows/deploy_all.yml/dispatches -d '{"ref": "main"}'
          echo "Retriggered!"

  architect:
    name: Publish Architect
    runs-on: ubuntu-latest
    needs: sync
    if: needs.sync.outputs.changed == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Setup dependencies
        run: yarn install
      - name: Build
        run: cd architect && yarn build
      - name: Arc hydrate
        run: cd architect && yarn arc hydrate
      - name: Publish Architect
        run: cd architect && yarn arc deploy --production -v --prune
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  fly:
    name: Publish Fly
    runs-on: ubuntu-latest
    needs: sync
    if: needs.sync.outputs.changed == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup fly
        uses: superfly/flyctl-actions/setup-flyctl@master
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: Deploy
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  netlify:
    name: Publish Netlify
    runs-on: ubuntu-latest
    needs: sync
    if: needs.sync.outputs.changed == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Setup dependencies
        run: yarn install
      - name: Build Netlify
        run: cd netlify && yarn build
      - name: Publish Netlify
        run: cd netlify && yarn netlify deploy --dir=public --functions=.netlify --prod
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_API_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  pages:
    name: Publish Pages
    runs-on: ubuntu-latest
    needs: sync
    if: needs.sync.outputs.changed == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Setup dependencies
        run: yarn install
      - name: Publish Pages
        run: yarn workspace pages deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

  vercel:
    name: Publish Vercel
    runs-on: ubuntu-latest
    needs: sync
    if: needs.sync.outputs.changed == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Setup dependencies
        run: yarn install
      - name: Pull Vercel
        run: cd vercel && yarn vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }}
      - name: Build Vercel
        run: cd vercel && yarn vercel build --token ${{ secrets.VERCEL_TOKEN }}
      - name: Publish Vercel
        run: cd vercel && yarn vercel deploy --token ${{ secrets.VERCEL_TOKEN }} --prod

  workers:
    name: Publish Worker
    runs-on: ubuntu-latest
    needs: sync
    if: needs.sync.outputs.changed == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Setup dependencies
        run: yarn install
      - name: Publish Worker
        run: yarn workspace workers deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
